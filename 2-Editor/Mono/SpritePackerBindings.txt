C++RAW
#include "UnityPrefix.h"
#include "Configuration/UnityConfigure.h"
#include "Runtime/Scripting/ScriptingExportUtility.h"
#if ENABLE_SPRITES
#include "Runtime/BaseClasses/IsPlaying.h"
#include "Runtime/Scripting/ScriptingUtility.h"
#include "Runtime/Graphics/SpriteFrame.h"
#include "Runtime/Misc/BuildSettings.h"
#include "Editor/Src/SpritePacker/SpritePacker.h"
#include "Editor/Src/SpritePacker/SpritePackerCache.h"
#endif //ENABLE_SPRITES


CSRAW
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections;
using UnityEngine;

#if ENABLE_SPRITES
namespace UnityEditor.Sprites
{

CONDITIONAL ENABLE_SPRITES
STRUCT AtlasSettings
	public TextureFormat    format;
	public TextureUsageMode usageMode;
	public ColorSpace       colorSpace;
	public int              compressionQuality;
	public FilterMode       filterMode;
	public int              maxWidth;
	public int              maxHeight;
END

CONDITIONAL ENABLE_SPRITES
CLASS PackerJob

	internal PackerJob() {}

	CUSTOM public void AddAtlas(string atlasName, AtlasSettings settings)
	{
		SpritePacker::ActiveJob_AddAtlas(atlasName, settings);
	}

	CUSTOM public void AssignToAtlas(string atlasName, Sprite sprite, SpritePackingMode packingMode, SpritePackingRotation packingRotation)
	{
		SpritePacker::ActiveJob_AssignToAtlas(atlasName, sprite, packingMode, packingRotation);
	}

END

CONDITIONAL ENABLE_SPRITES
/// Describes Sprite Packer
CLASS Packer

	CUSTOM_PROP public static string[] atlasNames
	{
		std::vector<std::string> names;
		SpriteAtlasCache::Get().GetAvailableAtlases(names);
		
		const size_t count = names.size();
		ScriptingArrayPtr array = CreateScriptingArray<ScriptingStringPtr>(GetScriptingManager().GetCommonClasses().string, count);
		for (int i = 0; i < count; i++)
		{
			Scripting::SetScriptingArrayElement<ScriptingStringPtr>(array, i, scripting_string_new(names[i]));
		}
		return array;
	}

	CUSTOM public static Texture2D[] GetTexturesForAtlas(string atlasName)
	{
		std::vector<PPtr<Texture2D> > textures;
		SpriteAtlasCache::Get().GetTexturesForAtlas(atlasName, textures);
		return CreateScriptingArrayFromUnityObjects(textures, ClassID(Texture2D));
	}

	CUSTOM public static void RebuildAtlasCacheIfNeeded(BuildTarget target, bool displayProgressBar = false, Execution execution = Execution.Normal)
	{
		if (!GetBuildSettings().hasAdvancedVersion)
		{
			ErrorString("Sprite packing is only supported in Unity Pro.");
			return;
		}

		if (IsWorldPlaying())
		{
			ErrorString("Sprite packing can not be done in Play mode.");
			return;
		}

		SpritePacker::RebuildAtlasCacheIfNeeded(target, displayProgressBar, execution, false);
	}

	CUSTOM public static void GetAtlasDataForSprite(Sprite sprite, out string atlasName, [Writable]out Texture2D atlasTexture)
	{
		atlasName->str = MonoStringNew(sprite->GetActiveAtlasName());
		*atlasTexture = ScriptingGetObjectReference(sprite->GetActiveAtlasTexture());		
	}

END

CSRAW
}
#endif //ENABLE_SPRITES
