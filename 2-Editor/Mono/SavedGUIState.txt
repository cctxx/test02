C++RAW

#include "UnityPrefix.h"
#include "Runtime/Math/Rect.h"
#include "Runtime/Scripting/ScriptingUtility.h"
#include "Runtime/IMGUI/GUIState.h"
#include "Runtime/Graphics/ScreenManager.h"
#include "Runtime/Camera/RenderManager.h"

CSRAW
using System;
using UnityEngine;
//using UnityEngineInternal;
//using UnityEditorInternal;
using Object=UnityEngine.Object;
//using System.Runtime.CompilerServices;
//using System.Runtime.InteropServices;
//using System.Collections;
//using System.IO;

namespace UnityEditor
{


	STRUCT internal SavedGUIState
		CSRAW internal GUILayoutUtility.LayoutCache layoutCache;
		CSRAW internal System.IntPtr guiState;
		CSRAW internal Vector2 screenManagerSize;
		CSRAW internal Rect renderManagerRect;
		CSRAW internal GUISkin skin;
	

		CUSTOM static private void Internal_SetupSavedGUIState (out IntPtr state, out Vector2 screenManagerSize, out Rect renderManagerRect)
		{
			*state = GUIState::GetPushState ();
			ScreenManagerPlatform& sm = GetScreenManager ();
			*screenManagerSize = Vector2f (sm.GetWidth(), sm.GetHeight());
			RenderManager& rm = GetRenderManager ();
			*renderManagerRect = rm.GetWindowRect (); 
		}
				
		CUSTOM static private void Internal_ApplySavedGUIState (IntPtr state, Vector2 screenManagerSize, Rect renderManagerRect)
		{
			GUIState::PopAndDelete ((GUIState*)state);
			GetScreenManager().SetupScreenManagerEditor (screenManagerSize.x, screenManagerSize.y);
			GetRenderManager().SetWindowRect (renderManagerRect);
		}

		CUSTOM static internal int Internal_GetGUIDepth ()
		{
			return GetGUIState().m_OnGUIDepth;
		}

		CSRAW static internal SavedGUIState Create ()
		{
			SavedGUIState state = new SavedGUIState();
			if (Internal_GetGUIDepth() > 0)
			{
				state.skin = GUI.skin;
				state.layoutCache = new GUILayoutUtility.LayoutCache (GUILayoutUtility.current);
				Internal_SetupSavedGUIState (out state.guiState, out state.screenManagerSize, out state.renderManagerRect);
			}
			return state;
		}	

		CSRAW internal void ApplyAndForget ()
		{
			if (layoutCache != null)
			{
				GUILayoutUtility.current = layoutCache;
				GUI.skin = skin;
				Internal_ApplySavedGUIState (guiState, screenManagerSize, renderManagerRect);
				GUIClip.Reapply();
			}
		}

	END

CSRAW
} // namespace
