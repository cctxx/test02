CSRAW
using UnityEngine;
using System.Collections;


namespace UnityEditor
{

// The GenericMenu lets you create a custom context and dropdown menus.



CLASS GenericMenu 
	CSRAW
	
	// Callback function, called when a menu item is selected
	public delegate void MenuFunction ();
	
	// Callback function with user data, called when a menu item is selected
	public delegate void MenuFunction2 (object userData);


	// Add an item to the menu
	public void AddItem (GUIContent content, bool on, MenuFunction func)
	{
		menuItems.Add (new MenuItem (content, on, func));
	}

	// Add an item to the menu
	public void AddItem (GUIContent content, bool on, MenuFunction2 func, object userData) 
	{
		menuItems.Add (new MenuItem (content, on, func, userData));
	}
	
	// Add a disabled item to the menu
	public void AddDisabledItem (GUIContent content) 
	{
		menuItems.Add (new MenuItem (content, false, null));
	}

	// Add a seperator item to the menu
	public void AddSeparator (string path)
	{
		menuItems.Add (new MenuItem (new GUIContent (path), false, null));
	}
	
	// Get number of items in the menu
	public int GetItemCount ()
	{
		return menuItems.Count;
	}
	
 	private ArrayList menuItems = new ArrayList ();

	CLASS private MenuItem 
	
		CSRAW
		public GUIContent content;
		public bool on;
		public MenuFunction func;
		public MenuFunction2 func2;
		public object userData;
		public MenuItem (GUIContent _content, bool _on, MenuFunction _func) {
			content = _content;
			on = _on;
			func = _func;
		}
		public MenuItem (GUIContent _content, bool _on, MenuFunction2 _func, object _userData) {
			content = _content;
			on = _on;
			func2 = _func;
			userData = _userData;
		}
	END

	// Show the menu under the mouse
	public void ShowAsContext () 
	{
		DropDown (new Rect (Event.current.mousePosition.x, Event.current.mousePosition.y, 0,0));
	}

	// Show the menu at the given screen rect
	public void DropDown (Rect position) 
	{
		string[] titles = new string[menuItems.Count];
		bool[] enabled = new bool[menuItems.Count];
		ArrayList selected = new ArrayList();
		
		for (int idx = 0; idx < menuItems.Count; idx++) 
		{
			MenuItem item = (MenuItem)menuItems[idx];
			titles[idx] = item.content.text;
			enabled[idx] = ((item.func != null) || (item.func2 != null));
			if (item.on) 
				selected.Add (idx);
		}
		
		EditorUtility.DisplayCustomMenu (position, titles, enabled, (int[])selected.ToArray (typeof (int)), CatchMenu, null);
	}

	// Display as a popup with /selectedIndex/. How this behaves depends on the platform (on Mac, it'll try to scroll the menu to the right place)
	// @TODO Not implemented yet...
	internal void Popup (Rect position, int selectedIndex) 
	{
		if (Application.platform == RuntimePlatform.WindowsEditor) 
		{
			DropDown (position);
			return;
		}
		
		// @TODO: On Mac, scroll the point or do something
		DropDown (position);
	}

	
	private void CatchMenu (object userData, string[] options, int selected) 
	{
		MenuItem i = (MenuItem)menuItems[selected];
		if (i.func2 != null)
			i.func2 (i.userData);
		else if (i.func != null)
			i.func ();
	}
END


} // namespace
 
