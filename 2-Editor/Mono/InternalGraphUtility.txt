C++RAW

#include "UnityPrefix.h"
#include "Configuration/UnityConfigureOther.h"
#include "Editor/Src/Graphs/GraphUtils.h"
#include "Editor/Src/AssetPipeline/LogicGraphCompilationPipeline.h"
#include "Editor/Src/CommandImplementation.h"
#include "Runtime/Scripting/ScriptingExportUtility.h"
#include "Runtime/Mono/MonoBehaviour.h"



using namespace std;

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;

using UnityEditor;



namespace UnityEditorInternal
{

//*undocumented*
CLASS InternalGraphUtility
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static ScriptableObject GetEditorGraphData (int graphBehaviourComponentsInstanceID)
	{
		return Scripting::ScriptingWrapperFor(GetEditorGraphData(graphBehaviourComponentsInstanceID));
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static GameObject GetGraphComponentsGameObject(int graphBehaviourComponentsInstanceID)
	{
		return Scripting::ScriptingWrapperFor(GetGraphComponentsGameObject(graphBehaviourComponentsInstanceID));
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static void LogGraphCompilationError(int graphBehavioursInstanceID, string error)
	{ 
		LogGraphCompilationError(*dynamic_instanceID_cast<MonoBehaviour*> (graphBehavioursInstanceID), MonoStringToCpp(error));
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static void InitializeMonoBehaviourWithSerializationDummy(int monoBehaviourID, Type monoClass, object instance)
	{
		MonoType* type = ExtractMonoObjectData<MonoType*>(monoClass);
		InitializeMonoBehaviourWithSerializationDummy(monoBehaviourID, type, instance);
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static Component AddComponentDontShareScript (GameObject go, Type componentType)
	{
		return MonoAddComponentWithType(*go, componentType, true);
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static bool CopyGraphAndNodesToPasteboard(int sourceGraphBehaviourInstanceID, int[] instanceIDs)
	{
		set<SInt32> ptrs;
		MonoArrayToSet(instanceIDs, ptrs);
		return CopyGraphAndNodesToPasteboard (sourceGraphBehaviourInstanceID, ptrs);
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static ScriptableObject InstantiateGraphAndNodesFromPasteboard(int destinationGraphBehaviourInstanceID)
	{
		return Scripting::ScriptingWrapperFor(InstantiateGraphAndNodesFromPasteboard(destinationGraphBehaviourInstanceID));
	}
	
	CONDITIONAL UNITY_LOGIC_GRAPH
	CUSTOM internal static ScriptableObject DuplicateGraphAndNodesUsingPasteboard(int graphBehaviourInstanceID, int[] instanceIDs)
	{
		set<SInt32> ptrs;
		MonoArrayToSet(instanceIDs, ptrs);
		return Scripting::ScriptingWrapperFor(DuplicateGraphAndNodesUsingPasteboard(graphBehaviourInstanceID, ptrs));
	}
	
	CUSTOM internal static string GenerateGraphName()
	{
		return MonoStringNew(GenerateGraphName());
	}

	CUSTOM internal static int[] AllGraphsOnGameObject(GameObject go)
	{
		vector<int> ids = AllGraphsOnGameObject(go);
		return CreateScriptingArray (&ids[0], ids.size(), MONO_COMMON.int_32);
	}
	
	CUSTOM internal static int[] AllGraphsInScene()
	{
		vector<int> ids = AllGraphsInScene();
		return CreateScriptingArray (&ids[0], ids.size(), MONO_COMMON.int_32);
	}
END

CSRAW }
