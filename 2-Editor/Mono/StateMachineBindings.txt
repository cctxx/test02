C++RAW

#include "UnityPrefix.h"
#include "Runtime/Mono/MonoManager.h"
#include "Runtime/Mono/MonoUtility.h"
#include "Runtime/Mono/MonoBehaviour.h"
#include "Runtime/Mono/MonoScript.h"
#include "Runtime/Animation/Animator.h"
#include "Editor/Src/Animation/StateMachine.h"
#include "Editor/Src/Animation/AvatarMask.h"
#include "Runtime/Scripting/ScriptingExportUtility.h"
#include "Runtime/Scripting/Scripting.h"

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections;

namespace UnityEditorInternal
{
//*undocumented*
ENUM public TransitionConditionMode
	If = 1,
	IfNot = 2,	
	Greater = 3,
	Less = 4,
	ExitTime = 5,
	Equals = 6,
	NotEqual = 7,
END


CLASS public AnimatorCondition
		
	CSRAW public TransitionConditionMode		mode 								{ get {return checkValid() ? m_Transition.GetConditionMode(m_Index) :(TransitionConditionMode)0 ;}		set {if(checkValid()) m_Transition.SetConditionMode(m_Index,value);}		}
	CSRAW public string							parameter 							{ get {return checkValid() ? m_Transition.GetConditionParameter(m_Index) : "" ;}						set {if(checkValid()) m_Transition.SetConditionParameter(m_Index,value);}	}	
	CSRAW public float							threshold 							{ get {return checkValid() ? m_Transition.GetParameterTreshold(m_Index): 0;}							set {if(checkValid()) m_Transition.SetParameterTreshold(m_Index,value);}		}
	CSRAW public float							exitTime							{ get {return checkValid() ? m_Transition.GetExitTime(m_Index): 0;}										set {if(checkValid()) m_Transition.SetExitTime(m_Index,value);}			}
	

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internals
	CSRAW internal AnimatorCondition(Transition transition, int index)
	{
		m_Transition = transition;
		m_Index = index;
		transition.onRemovedCondition+= RemoveCondition;
		m_Valid = true;
	}

	CSRAW private bool checkValid() 
	{ 
		if(!m_Valid)
 		{
 			Debug.LogError("AnimatorCondition is not valid anymore. It was removed");
 			return false;
 		}
		return true;
	}

	CSRAW private void RemoveCondition(int index)
	{
		if(index == m_Index)
		{
			m_Valid = false;
		}
		else if ( index < m_Index)
		{
			m_Index--;
		}
	}


	Transition m_Transition;
	int m_Index;
	bool m_Valid;
END


//*undocumented*
CLASS public Transition: Object
	
	CUSTOM_PROP string							uniqueName														{return scripting_string_new(self->GetUniqueName());}	
	CUSTOM_PROP int								uniqueNameHash													{return self->GetUniqueNameHash();}	

	CUSTOM_PROP int								conditionCount													{return self->GetConditionCount();}	
	CSRAW public AnimatorCondition				GetCondition(int index)											{return ValidateConditionIndex(index) ? new AnimatorCondition(this,index): null;}
	CSRAW public AnimatorCondition				AddCondition()													{AddConditionInternal(); return GetCondition(conditionCount-1);}
	CSRAW public void							RemoveCondition(int index)										
	{
		if(onRemovedCondition != null)
		{
			onRemovedCondition(index);
		}
		RemoveConditionInternal(index);
	}
			
	CUSTOM_PROP float							duration 														{return self->GetTransitionDuration();}		{self->SetTransitionDuration(value);}
	CUSTOM_PROP float							offset															{return self->GetTransitionOffset();}		{self->SetTransitionOffset(value);}			
	CUSTOM_PROP bool							atomic															{return self->GetAtomic();}					{self->SetAtomic(value);}			
	CUSTOM_PROP bool							solo															{return self->GetSolo();}					{self->SetSolo(value);}	
	CUSTOM_PROP bool							mute															{return self->GetMute();}					{self->SetMute(value);}
		
	CUSTOM_PROP State							srcState														{return Scripting::ScriptingWrapperFor(self->GetSrcState());}	 
	CUSTOM_PROP State							dstState														{return Scripting::ScriptingWrapperFor(self->GetDstState());}	

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internals
	CUSTOM_PROP internal	string				shortDisplayName												{return scripting_string_new(self->GetDisplayName(true));}
	CUSTOM internal  void						AddConditionInternal()											{self->AddCondition();}
	CUSTOM internal  void						RemoveConditionInternal(int index)								{self->RemoveCondition(index);}

	CSRAW internal delegate void				RemovedCondition(int index);
	CSRAW internal RemovedCondition				onRemovedCondition;

	CUSTOM internal bool						ValidateConditionIndex(int index)								{return self->ValidateConditionIndex(index);}
	CUSTOM internal TransitionConditionMode		GetConditionMode(int index) 									{return self->GetConditionMode(index);}
	CUSTOM internal void						SetConditionMode(int index, TransitionConditionMode mode)		{self->SetConditionMode(index,mode);}		
	CUSTOM internal string						GetConditionParameter(int index) 								{return scripting_string_new(self->GetConditionParameter(index));}
	CUSTOM internal void						SetConditionParameter(int index, string eventName)				{self->SetConditionParameter(index,eventName);}		
	CUSTOM internal float						GetParameterTreshold(int index) 								{return self->GetParameterTreshold(index);}
	CUSTOM internal void						SetParameterTreshold(int index, float threshold)				{self->SetParameterTreshold(index,threshold);}
	CUSTOM internal float						GetExitTime(int index) 											{return self->GetExitTime(index);}
	CUSTOM internal void						SetExitTime(int index, float exit)								{self->SetExitTime(index,exit);}			
	

END

//*undocumented*
CLASS public State : Object
	
	CUSTOM_PROP string			uniqueName																{return scripting_string_new(self->GetUniqueName());}
	CUSTOM_PROP int				uniqueNameHash															{return self->GetUniqueNameHash();}
							
	CUSTOM_PROP float			speed																	{return self->GetSpeed();}									{self->SetSpeed(value);}	
	CUSTOM_PROP bool			mirror																	{return self->GetMirror();}									{self->SetMirror(value);}	
	CUSTOM_PROP bool			iKOnFeet																{return self->GetIKOnFeet();}								{self->SetIKOnFeet(value);}		
	CUSTOM_PROP string			tag																		{return scripting_string_new(self->GetTag());}				{self->SetTag(value);}
	CUSTOM_PROP StateMachine	stateMachine															{return Scripting::ScriptingWrapperFor(self->GetStateMachine());}		
	CUSTOM_PROP Vector3			position																{return self->GetPosition();  }								{self->SetPosition(value);}		
		

	CSRAW public Motion				GetMotion(AnimatorControllerLayer layer = null)								{return GetMotionInternal(layer != null ? layer.motionSetIndex : 0);}
	CSRAW public void 				SetAnimationClip(AnimationClip clip, AnimatorControllerLayer layer = null)	{SetMotionInternal(clip, layer != null ? layer.motionSetIndex : 0);}
	CSRAW public BlendTree			CreateBlendTree(AnimatorControllerLayer layer = null)						{return CreateBlendTreeInternal(layer != null ? layer.motionSetIndex: 0);}
								
	
	CUSTOM internal void		SetMotionInternal(Motion motion, int motionSetIndex = 0)				{self->SetMotion(motionSetIndex, motion);}
	CUSTOM internal Motion		GetMotionInternal(int motionSetIndex = 0)								{return Scripting::ScriptingWrapperFor(self->GetMotion(motionSetIndex));}
	CUSTOM internal BlendTree	CreateBlendTreeInternal(int motionSetIndex = 0)							{return Scripting::ScriptingWrapperFor(self->CreateBlendTree(motionSetIndex));}

END

//*undocumented*
CLASS public StateMachine : Object
		

	CUSTOM_PROP int				stateCount																{ return self->GetStateCount();}
	CUSTOM State				GetState(int index)														{ return Scripting::ScriptingWrapperFor(self->GetState(index)); } 			
	CUSTOM State				AddState(string stateName)												{ return Scripting::ScriptingWrapperFor(self->AddState(stateName));}	
	CUSTOM void					RemoveState(State state)												{ self->RemoveState(state);}
	
	CUSTOM_PROP int				stateMachineCount														{ return self->GetStateMachineCount();}				
	CUSTOM StateMachine			GetStateMachine(int index)												{ return Scripting::ScriptingWrapperFor(self->GetStateMachine(index));} 	
	CUSTOM StateMachine			AddStateMachine(string stateMachineName)								{ return Scripting::ScriptingWrapperFor(self->AddStateMachine(stateMachineName));}	
	CUSTOM void					RemoveStateMachine(StateMachine	stateMachine)							{ self->RemoveStateMachine(stateMachine);}
					
	CUSTOM Transition			AddTransition(State src, State dst)										{ return Scripting::ScriptingWrapperFor(self->AddTransition(src,dst));}
	CUSTOM Transition			AddAnyStateTransition(State dst)										{ return Scripting::ScriptingWrapperFor(self->AddTransition(0,dst));}
	CUSTOM void					RemoveTransition(Transition transition)									{ self->RemoveTransition(transition);}	
				
	CUSTOM_PROP State			defaultState															{ return Scripting::ScriptingWrapperFor(self->DefaultState()); } { self->SetDefaultState(value);}

	CUSTOM_PROP Vector3			anyStatePosition														{ return self->GetAnyStatePosition (); } { self->SetAnyStatePosition (value); }
	CUSTOM_PROP Vector3			parentStateMachinePosition												{ return self->GetParentStateMachinePosition (); } { self->SetParentStateMachinePosition (value); }
	CUSTOM Vector3				GetStateMachinePosition(int i)											{ return self->GetStateMachinePosition(i); }
	CUSTOM void					SetStateMachinePosition(int i, Vector3 pos)								{ self->SetStateMachinePosition(i, pos); }
	
	CUSTOM_PROP int				motionSetCount															{ return self->GetMotionSetCount();}
	
	CUSTOM Transition[]			GetTransitionsFromState(State srcState)									
	{
		TransitionVector transitions = self->GetOrderedTransitionsFromState(srcState);
		return CreateScriptingArrayFromUnityObjects(transitions, ClassID(Transition));	
	}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internals
	CUSTOM internal void		MoveState(State state, StateMachine target)								{ self->MoveState(state, target);}
	CUSTOM internal void		MoveStateMachine(StateMachine stateMachine, StateMachine target)		{ self->MoveStateMachine(stateMachine, target);}			
	
	CUSTOM internal bool		HasState(State state, bool recursive)									{ return self->HasState(state,recursive);}		
	CUSTOM internal bool		HasStateMachine(StateMachine state, bool recursive)						{ return self->HasStateMachine(state,recursive);}																				
	
	CUSTOM void	internal		SetTransitionsFromState(State srcState, Transition[] transitions)		
	{		
		TransitionVector toTransitions;
		toTransitions.resize(mono_array_length_safe(transitions));
		for (int i=0;i<toTransitions.size();i++)
		{
			int instanceID = Scripting::GetInstanceIDFromScriptingWrapper(GetMonoArrayElement<MonoObject*>(transitions, i));
			toTransitions[i] = PPtr<Transition> (instanceID);
		}
		
		self->SetOrderedTransitionsFromState(srcState, toTransitions);		
	}


	CUSTOM_PROP	internal int	transitionCount															{ return self->GetTransitionCount(); }		

END

CSRAW }
