C++RAW

#include "UnityPrefix.h"
#include "Runtime/Mono/MonoManager.h"
#include "Runtime/Mono/MonoUtility.h"
#include "Runtime/Mono/MonoBehaviour.h"
#include "Runtime/Mono/MonoScript.h"
#include "Runtime/Animation/AnimatorController.h"
#include "Runtime/Animation/AnimatorOverrideController.h"
#include "Editor/Src/Animation/AnimatorControllerLayer.h"
#include "Editor/Src/Animation/AnimatorControllerParameter.h"
#include "Runtime/Animation/Animator.h"
#include "Editor/Src/Animation/StateMachine.h"
#include "Editor/Src/Animation/AvatarMask.h" 
#include "Runtime/Scripting/ScriptingExportUtility.h"
#include "Runtime/Scripting/Scripting.h"

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections;

namespace UnityEditorInternal
{	


// This enum need to match 
//	Runtime/mecanim/generic/typetraits.h ValueType enum
//	Editor/Src/Animation/AnimatorControllerParameter.h AnimatorControllerParameterType enum
//*undocumented*
ENUM public AnimatorControllerParameterType
	Float = 1,
    Int = 3,
    Bool = 4,
	Trigger = 9,
END

//*undocumented*
ENUM public AnimatorLayerBlendingMode	
	Override = 0,
	Additive = 1,				
END


CLASS public AnimatorControllerLayer
		
	CSRAW public string						name				{	get { return checkValid() ? m_Controller.GetLayerName(m_Index) : "" ; }										set { if(checkValid()) m_Controller.SetLayerName(m_Index,value);}				}
	CSRAW public StateMachine				stateMachine		{	get { return checkValid() ? m_Controller.GetLayerStateMachine(m_Index) : null; }																											}
	CSRAW public AvatarMask					avatarMask			{	get { return checkValid() ? m_Controller.GetLayerMask(m_Index) : null ; }									set { if(checkValid()) m_Controller.SetLayerMask(m_Index,value);}				}
	CSRAW public AnimatorLayerBlendingMode	blendingMode		{	get { return checkValid() ? m_Controller.GetLayerBlendingMode(m_Index) : (AnimatorLayerBlendingMode)0; }	set { if(checkValid()) m_Controller.SetLayerBlendingMode(m_Index,value);}		}
	CSRAW public int						syncedLayerIndex	{	get { return checkValid() ? m_Controller.GetLayerSyncedIndex(m_Index) : 0 ; }								set { if(checkValid()) m_Controller.SetLayerSyncedIndex(m_Index,value);}		}
	CSRAW public int						motionSetIndex		{	get { return checkValid() ? m_Controller.GetLayerMotionSetIndex(m_Index) : 0 ; }																											}
	CSRAW public bool						iKPass				{	get { return checkValid() ? m_Controller.GetLayerIKPass(m_Index) : false; }									set { if(checkValid()) m_Controller.SetLayerIKPass(m_Index,value);}				}
	CSRAW public float						defaultWeight		{	get { return checkValid() ? m_Controller.GetLayerDefaultWeight(m_Index) : 0 ; }							    set { if(checkValid()) m_Controller.SetLayerDefaultWeight(m_Index,value);}		}
	
	CSRAW public bool	                    syncedLayerAffectsTiming	{ get { return checkValid() ? m_Controller.GetSyncedLayerAffectsTiming(m_Index) : false ;}				set { if(checkValid()) m_Controller.SetSyncedLayerAffectsTiming(m_Index,value);}}
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internals
	CSRAW public AnimatorControllerLayer(AnimatorController controller, int index)
	{
		m_Controller = controller;
		m_Index = index;
		controller.onRemovedLayer += RemoveLayer;
		m_Valid = true;
	}
	
	CSRAW private bool checkValid() 
	{ 
		if( !m_Valid)
		{
			Debug.LogError("AnimatorControllerLayer is not valid anymore. It was removed");
			return false;
		}
		return true;
	}

	CSRAW private void RemoveLayer(int index)
	{
		if(index == m_Index)
		{
			m_Valid = false;
		}
		else if ( index < m_Index)
		{
			m_Index--;
		}
	}


	AnimatorController m_Controller;
	int m_Index;
	bool  m_Valid;

END

CLASS public AnimatorControllerParameter

	CSRAW public string								name			{	get {return checkValid() ? m_Controller.GetParameterName(m_Index) : "" ; }										set {if(checkValid()) m_Controller.SetParameterName(m_Index,value);}			}
	CSRAW public AnimatorControllerParameterType	type			{	get {return checkValid() ? m_Controller.GetParameterType(m_Index) : AnimatorControllerParameterType.Float; }	set {if(checkValid()) m_Controller.SetParameterType(m_Index,value);}			}	
	CSRAW public float								defaultFloat	{	get {return checkValid() ? m_Controller.GetParameterDefaultFloat(m_Index) : 0; }								set {if(checkValid()) m_Controller.SetParameterDefaultFloat(m_Index,value);}	}
	CSRAW public int								defaultInt		{	get {return checkValid() ? m_Controller.GetParameterDefaultInt(m_Index) : 0 ; }									set {if(checkValid()) m_Controller.SetParameterDefaultInt(m_Index,value);}		}
	CSRAW public bool								defaultBool		{	get {return checkValid() ? m_Controller.GetParameterDefaultBool(m_Index) : false; }								set {if(checkValid()) m_Controller.SetParameterDefaultBool(m_Index,value);}		}

	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internals
	CSRAW public AnimatorControllerParameter(AnimatorController controller, int index)
	{
		m_Controller = controller;
		m_Index = index;
		m_Valid =  true;
		controller.onRemovedParameter += RemoveParameter;
	}

	CSRAW private bool checkValid() 
	{ 
		if(!m_Valid)
 		{
 			Debug.LogError("AnimatorControllerParameter is not valid anymore. It was removed");
 			return false;
 		}
		return true;
	}

	CSRAW private void RemoveParameter(int index)
	{
		if(index == m_Index)
		{
			m_Valid = false;
		}
		else if ( index < m_Index)
		{
			m_Index--;
		}
	}
		
	AnimatorController m_Controller;
	int m_Index;
	bool  m_Valid;

END

//*undocumented*
CLASS public AnimatorController :  RuntimeAnimatorController  


	CSRAW public AnimatorController()
	{
		Internal_Create(this);		
	}	
	
	CUSTOM private static void Internal_Create ( AnimatorController mono)   
	{
		AnimatorController* controller = NEW_OBJECT_MAIN_THREAD (AnimatorController);
		controller->Reset();
		Scripting::ConnectScriptingWrapperToObject (mono.GetScriptingObject(), controller);
		controller->AwakeFromLoad(kInstantiateOrCreateFromCodeAwakeFromLoad);		
	}		

			
	CUSTOM_PROP		int							layerCount														{ return self->GetLayerCount();}
	
	CSRAW public	AnimatorControllerLayer		GetLayer(int index)												{ return ValidateLayerIndex(index) ?  new AnimatorControllerLayer(this,index) : null;}	
	CSRAW public	AnimatorControllerLayer		AddLayer(string name)											{ AddLayerInternal(name); return GetLayer(layerCount-1);}
	CSRAW public	void						RemoveLayer(int index)											
	{ 
		if(onRemovedLayer != null)
		{
			onRemovedLayer(index);
		}
		RemoveLayerInternal(index);
	}
		
	CUSTOM_PROP		int							parameterCount													{ return self->GetParameterCount();}
	CSRAW public	AnimatorControllerParameter	GetParameter(int index)											{ return ValidateParameterIndex(index) ? new AnimatorControllerParameter(this,index) : null;}		
	CSRAW public 	AnimatorControllerParameter	AddParameter(string name, AnimatorControllerParameterType type)	{ AddParameterInternal(name, type); return GetParameter(parameterCount-1);}
	CSRAW public	void						RemoveParameter(int index)
	{
		if(onRemovedParameter != null)
		{
			onRemovedParameter(index);
		}
		
		RemoveParameterInternal(index);
	}
	CUSTOM			int							FindParameter(string name)										{ return self->FindParameter(name); }

		
	CUSTOM static			AnimatorController GetEffectiveAnimatorController(Animator behavior)			
	{ 
		AnimatorController* controller = behavior->GetAnimatorController();
		if(controller)
			return Scripting::ScriptingWrapperFor(behavior->GetAnimatorController());

		AnimatorOverrideController* overrideController = behavior->GetAnimatorOverrideController();
		if(overrideController)
			return Scripting::ScriptingWrapperFor(overrideController->GetAnimatorController());

		else
			return Scripting::ScriptingWrapperFor(0);
	}

	CUSTOM static			void SetAnimatorController(Animator behavior, AnimatorController controller)	{ behavior->SetRuntimeAnimatorController(controller);}	


	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Internals

	
	CUSTOM internal Object[]			CollectObjectsUsingParameter(string parameterName)	
	{ 
		return CreateScriptingArrayFromUnityObjects(self->CollectObjectsUsingParameter(parameterName), ClassID(Object));		
	}

	CUSTOM_PROP internal bool		isAssetBundled { return self->IsAssetBundled(); } 


	CSRAW internal delegate void RemovedParameter(int index);
	CSRAW internal RemovedParameter onRemovedParameter;

	CSRAW internal delegate void RemovedLayer(int index);
	CSRAW internal RemovedLayer onRemovedLayer;

	CUSTOM internal void RemoveLayerInternal(int index)												{ self->RemoveLayer(index); }
	CUSTOM internal void RemoveParameterInternal(int index)											{ self->RemoveParameter(index); }

	CUSTOM internal void AddParameterInternal(string name, AnimatorControllerParameterType type)	{ self->AddParameter(name, type);}
	CUSTOM internal void AddLayerInternal(string name)												{ self->AddLayer(name);}

	CUSTOM internal bool ValidateLayerIndex(int index)		{return self->ValidateLayerIndex(index);}
	CUSTOM internal bool ValidateParameterIndex(int index)	{return self->ValidateParameterIndex(index);}

	C++RAW
	#define LAYER_GET(Func) \
		self->GetLayer(index)->Func()

	#define LAYER_SET(Func) \
		self->GetLayer(index)->Func(value)

	CUSTOM internal string						GetLayerName(int index)												{ return scripting_string_new(LAYER_GET(GetName));}
	CUSTOM internal void						SetLayerName(int index, string value)								{ self->GetLayer(index)->SetName(value.AsUTF8().c_str()	);}
	CUSTOM internal StateMachine				GetLayerStateMachine(int index)										{ return Scripting::ScriptingWrapperFor(LAYER_GET(GetStateMachine));}
	CUSTOM internal void						SetLayerStateMachine(int index, StateMachine value)					{ LAYER_SET(SetStateMachine);}
	CUSTOM internal AvatarMask					GetLayerMask(int index)												{ return Scripting::ScriptingWrapperFor(LAYER_GET(GetMask));}
	CUSTOM internal void						SetLayerMask(int index, AvatarMask value)							{ LAYER_SET(SetMask);}
	CUSTOM internal AnimatorLayerBlendingMode	GetLayerBlendingMode(int index)										{ return LAYER_GET(GetBlendingMode);}
	CUSTOM internal void						SetLayerBlendingMode(int index, AnimatorLayerBlendingMode value)	{ LAYER_SET(SetBlendingMode);}
	CUSTOM internal int							GetLayerSyncedIndex(int index)										{ return LAYER_GET(GetSyncedLayerIndex);}
	CUSTOM internal void						SetLayerSyncedIndex(int index, int value)							{ LAYER_SET(SetSyncedLayerIndex);}
	CUSTOM internal int							GetLayerMotionSetIndex(int index)									{ return LAYER_GET(GetStateMachineMotionSetIndex);}
	CUSTOM internal bool						GetLayerIKPass(int index)											{ return LAYER_GET(GetIKPass);}
	CUSTOM internal void						SetLayerIKPass(int index, bool value)								{ LAYER_SET(SetIKPass);}			
	CUSTOM internal bool						GetSyncedLayerAffectsTiming(int index);								{ return LAYER_GET(GetSyncedLayerAffectsTiming);}
	CUSTOM internal void						SetSyncedLayerAffectsTiming(int index, bool value);					{ LAYER_SET(SetSyncedLayerAffectsTiming);}
	
	CUSTOM internal float						GetLayerDefaultWeight(int index)									{ return LAYER_GET(GetDefaultWeight);}
	CUSTOM internal void						SetLayerDefaultWeight(int index, float value)						{ LAYER_SET(SetDefaultWeight);}
	

	
	
	C++RAW
	#define PARAMETER_GET(Func) \
		self->GetParameter(index)->Func()

	#define PARAMETER_SET(Func) \
		self->GetParameter(index)->Func(value)
	
	CUSTOM internal string							GetParameterName(int index)												{ return scripting_string_new(PARAMETER_GET(GetName));}
	CUSTOM internal void							SetParameterName(int index, string value)								{ self->GetParameter(index)->SetName(value.AsUTF8().c_str());}
	CUSTOM internal AnimatorControllerParameterType	GetParameterType(int index)												{ return PARAMETER_GET(GetType);}
	CUSTOM internal void							SetParameterType(int index, AnimatorControllerParameterType value)		{ PARAMETER_SET(SetType);}
	CUSTOM internal float							GetParameterDefaultFloat(int index)										{ return PARAMETER_GET(GetDefaultFloat);}
	CUSTOM internal void							SetParameterDefaultFloat(int index, float value)						{ PARAMETER_SET(SetDefaultFloat);}
	CUSTOM internal int								GetParameterDefaultInt(int index)										{ return PARAMETER_GET(GetDefaultInt);}
	CUSTOM internal void							SetParameterDefaultInt(int index, int value)							{ PARAMETER_SET(SetDefaultInt);}
	CUSTOM internal bool							GetParameterDefaultBool(int index)										{ return PARAMETER_GET(GetDefaultBool);}
	CUSTOM internal void							SetParameterDefaultBool(int index, bool value)							{ PARAMETER_SET(SetDefaultBool);}
			
	
END



CSRAW }
