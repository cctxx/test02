C++RAW
#include "UnityPrefix.h"
#include "Configuration/UnityConfigure.h"
#include "Runtime/Scripting/ScriptingExportUtility.h"
#include "Runtime/Scripting/Scripting.h"
#if ENABLE_SPRITES
#include "Runtime/BaseClasses/BaseObject.h"
#include "Runtime/Mono/MonoBehaviour.h"
#include "Runtime/Scripting/Scripting.h"
#include "Runtime/Scripting/ScriptingExportUtility.h"
#include "Editor/Src/PolygonEditor.h"
//#include "Editor/Src/Undo/ObjectUndo.h"
#include "Runtime/Physics2D/PolygonCollider2D.h"
#include "Runtime/Physics2D/EdgeCollider2D.h"
#include "Runtime/Physics2D/SpriteCollider2D.h"
#endif //ENABLE_SPRITES

CSRAW
using UnityEngine;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

#if ENABLE_SPRITES
namespace UnityEditor
{
CONDITIONAL ENABLE_SPRITES
CLASS internal PolygonEditor
	
	CUSTOM public static void StartEditing(Collider2D collider)
	{
		Collider2D* colliderPtr = collider;

		PolygonCollider2D* poly = dynamic_pptr_cast<PolygonCollider2D*>(colliderPtr);
		if (poly)
		{
			PolygonEditor::Get().StartEditing(poly->GetPoly());
			return;
		}

		EdgeCollider2D* edge = dynamic_pptr_cast<EdgeCollider2D*>(colliderPtr);
		if (edge)
		{
			Polygon2D poly;
			poly.SetPathCount(1);
			poly.SetPath(0, edge->GetPoints());
			PolygonEditor::Get().StartEditing(poly);
			return;
		}

		Scripting::RaiseMonoException("Not implemented");
	}

	CUSTOM public static void ApplyEditing(Collider2D collider)
	{
		Collider2D* colliderPtr = collider;

		PolygonCollider2D* poly = dynamic_pptr_cast<PolygonCollider2D*>(colliderPtr);
		if (poly)
		{
			poly->GetPoly() = PolygonEditor::Get().GetPoly();
			poly->RefreshPoly();
			return;
		}

		EdgeCollider2D* edge = dynamic_pptr_cast<EdgeCollider2D*>(colliderPtr);
		if (edge)
		{
			edge->SetPoints(PolygonEditor::Get().GetPoly().GetPoints(), PolygonEditor::Get().GetPoly().GetPointCount());
			return;
		}

		Scripting::RaiseMonoException("Not implemented");
	}

	CUSTOM public static void StopEditing()
	{
		PolygonEditor::Get().StopEditing();
	}

	CUSTOM public static bool GetNearestPoint(Vector2 point, out int pathIndex, out int pointIndex, out float distance)
	{
		return PolygonEditor::Get().GetNearestPoint(point, *pathIndex, *pointIndex, *distance);
	}

	CUSTOM public static bool GetNearestEdge(Vector2 point, out int pathIndex, out int pointIndex0, out int pointIndex1, out float distance, bool loop)
	{
		return PolygonEditor::Get().GetNearestEdge(point, *pathIndex, *pointIndex0, *pointIndex1, *distance, loop);
	}

	CUSTOM public static int GetPathCount()
	{
		return PolygonEditor::Get().GetPathCount();
	}

	CUSTOM public static int GetPointCount(int pathIndex)
	{
		return PolygonEditor::Get().GetPointCount(pathIndex);
	}

	CUSTOM public static bool GetPoint(int pathIndex, int pointIndex, out Vector2 point)
	{
		return PolygonEditor::Get().GetPoint(pathIndex, pointIndex, *point);
	}

	CUSTOM public static void SetPoint(int pathIndex, int pointIndex, Vector2 value)
	{
		PolygonEditor::Get().SetPoint(pathIndex, pointIndex, value);
	}

	CUSTOM public static void InsertPoint(int pathIndex, int pointIndex, Vector2 value)
	{
		PolygonEditor::Get().InsertPoint(pathIndex, pointIndex, value);
	}

	CUSTOM public static void RemovePoint(int pathIndex, int pointIndex)
	{
		PolygonEditor::Get().RemovePoint(pathIndex, pointIndex);
	}

	// Checks if moving a point to a new position will cause intersections
	CUSTOM public static void TestPointMove(int pathIndex, int pointIndex, Vector2 movePosition, out bool leftIntersect, out bool rightIntersect, bool loop)
	{
		bool leftIntersectBool = false;
		bool rightIntersectBool = false;
		PolygonEditor::Get().TestPointMove(pathIndex, pointIndex, movePosition, leftIntersectBool, rightIntersectBool, loop);
		*leftIntersect = leftIntersectBool;
		*rightIntersect = rightIntersectBool;
	}

END
}
#endif //ENABLE_SPRITES
