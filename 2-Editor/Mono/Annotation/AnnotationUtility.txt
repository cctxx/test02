C++RAW

#include "UnityPrefix.h"
#include "Editor/Src/AnnotationManager.h"
#include "Runtime/Mono/MonoManager.h"
#include "Runtime/Scripting/ScriptingUtility.h"
#include "Runtime/Threads/Thread.h"
#include "Runtime/Graphics/Texture2D.h"
using namespace std;

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;
using System.IO;


namespace UnityEditor
{

C++RAW

struct AnnotationToMono
{
	int iconEnabled;
	int gizmoEnabled;
	int flags;
	int classID;
	MonoString * scriptClass;
};

	
//*undocumented*
STRUCT internal Annotation
    CSRAW
	public int iconEnabled;
	public int gizmoEnabled;
	public int flags;
	public int classID;
	public string scriptClass;
END


CLASS internal AnnotationUtility

	CUSTOM static internal Annotation[] GetAnnotations ()
	{
		const vector<Annotation>& annotations = GetAnnotationManager().GetAnnotations ();
		size_t size = annotations.size();
		
		MonoArray *arr = mono_array_new (mono_domain_get (), GetMonoManager().GetBuiltinEditorMonoClass("Annotation"), size );
		
		for (int i = 0; i < size ;i++) 
		{
			AnnotationToMono& a= GetMonoArrayElement<AnnotationToMono> (arr,i);
			a.iconEnabled = annotations[i].m_IconEnabled ? 1 : 0;
			a.gizmoEnabled = annotations[i].m_GizmoEnabled ? 1 : 0;
			a.flags = annotations[i].m_Flags;
			a.classID = annotations[i].m_ClassID;
			a.scriptClass = scripting_string_new(annotations[i].m_ScriptClass);
		}
		return arr;
	}

	CUSTOM static internal Annotation[] GetRecentlyChangedAnnotations () 
	{ 
		const vector<Annotation>& annotations = GetAnnotationManager().GetRecentlyChangedAnnotations ();
		size_t size = annotations.size();
		
		MonoArray *arr = mono_array_new (mono_domain_get (), GetMonoManager().GetBuiltinEditorMonoClass("Annotation"), size );
		
		for (int i = 0; i < size ;i++) 
		{
			AnnotationToMono& a= GetMonoArrayElement<AnnotationToMono> (arr,i);
			a.classID = annotations[i].m_ClassID;
			a.scriptClass = scripting_string_new(annotations[i].m_ScriptClass);
		}
		return arr;
	}
	
	CUSTOM static internal string GetNameOfCurrentSetup ()
	{
		return scripting_string_new(GetAnnotationManager().GetNameOfCurrentSetup());
	}

	CUSTOM static internal void SetGizmoEnabled (int classID, string scriptClass, int gizmoEnabled)
	{
		GetAnnotationManager().SetGizmoEnabled (classID, scriptClass, gizmoEnabled?true:false);
	}
	
	CUSTOM static internal void SetIconEnabled (int classID, string scriptClass, int iconEnabled)
	{
		GetAnnotationManager().SetIconEnabled (classID, scriptClass, iconEnabled?true:false);
	}	
	
	CUSTOM internal static string[] GetPresetList () 
	{ 
		return Scripting::StringVectorToMono (GetAnnotationManager().GetPresetList ()); 
	}

	CUSTOM internal static void LoadPreset (string presetName)
	{
		GetAnnotationManager().LoadPreset (presetName);
	}

	CUSTOM internal static void SavePreset (string presetName)
	{
		GetAnnotationManager().SavePreset (presetName);
	}

	CUSTOM internal static void DeletePreset (string presetName)
	{
		GetAnnotationManager().DeletePreset (presetName);
	}

	CUSTOM internal static void ResetToFactorySettings ()
	{
		GetAnnotationManager().ResetPresetsToFactorySettings ();
	}


	CUSTOM_PROP internal static bool use3dGizmos { return GetAnnotationManager().Is3dGizmosEnabled (); } { GetAnnotationManager().Set3dGizmosEnabled (value); }
	
	CUSTOM_PROP internal static bool showGrid { return GetAnnotationManager().GetShowGrid (); } { GetAnnotationManager().SetShowGrid (value); }
		
	CUSTOM_PROP internal static float iconSize { return GetAnnotationManager().GetIconSize (); } { GetAnnotationManager().SetIconSize (value); }

END

CSRAW }
