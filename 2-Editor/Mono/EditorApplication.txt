C++RAW

#include "UnityPrefix.h"
#include "Runtime/Utilities/FileUtilities.h"
#include "Editor/Src/Application.h"
#include "Runtime/Misc/SaveAndLoadHelper.h"
#include "Runtime/BaseClasses/IsPlaying.h"
#include "Editor/Src/MenuController.h"
#include "Editor/Src/AssetPipeline/MonoCompile.h"
#include "Runtime/BaseClasses/Tags.h"
#include "Editor/Platform/Interface/EditorUtility.h"
#include "Runtime/Input/TimeManager.h"
#include "Runtime/Scripting/Scripting.h"

using namespace std;

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;

namespace UnityEditor
{

// Main Application class. 
CLASS EditorApplication

	// Create a new scene
	CUSTOM static void NewScene () { return GetApplication().NewScene(); }
	
	// Opens the scene at /path/.
	CUSTOM static bool OpenScene (string path) { return GetApplication().OpenScene(path); }

	// Opens the scene at /path/ additively.
	CUSTOM static void OpenSceneAdditive (string path) { LoadLevelAdditiveEditor(path); }

	// Save the open scene.
	CUSTOM static bool SaveScene (string path = "", bool saveAsCopy = false)  { return GetApplication().SaveSceneFromScript (path, saveAsCopy); }

	// The path of the scene that the user has currently open (Will be an empty string if no scene is currently open). (RO)
	CUSTOM_PROP static string currentScene  { return scripting_string_new(GetApplication().GetCurrentScene()); }

	// Ask the user if he wants to save the open scene.
	CUSTOM static bool SaveCurrentSceneIfUserWantsTo ()  { return GetApplication().SaveCurrentSceneIfUserWantsTo(); }

	CUSTOM static internal bool SaveCurrentSceneIfUserWantsToForce ()  { return GetApplication().SaveCurrentSceneIfUserWantsToForce(); }

	// Open another project.
	CSRAW public static void OpenProject(string projectPath, params string[] args)
	{
		OpenProjectInternal(projectPath, args);
	}
	
	CUSTOM private static void OpenProjectInternal(string projectPath, string[] args)
	{
		vector<string> cargs;
		StringMonoArrayToVector (args, cargs);
		GetApplication().OpenProjectOnNextTick(projectPath, cargs);
	}

	// Saves all serializable assets that have not yet been written to disk (eg. Materials)
	CUSTOM static void SaveAssets ()  { GetApplication().SaveAssets(); }
	
	// Is editor currently in play mode?
	CUSTOM_PROP static bool isPlaying { return IsWorldPlaying(); } { GetApplication().SetIsPlayingDelayed(value); }
	
	// Is editor either currently in play mode, or about to switch to it? (RO)
	CUSTOM_PROP static bool isPlayingOrWillChangePlaymode { return GetApplication().IsPlayingOrWillEnterExitPlaymode(); }

	// Perform a single frame step.
	CUSTOM static void Step () { GetApplication().Step(); }

	// Is editor currently paused?
	CUSTOM_PROP static bool isPaused { return GetApplication().IsPaused(); } { GetApplication().SetPaused(value); }

	// Is editor currently compiling scripts? (RO)
	CUSTOM_PROP static bool isCompiling { return IsCompiling(); }
	///

	// Is editor currently updating? (RO)
	CUSTOM_PROP static bool isUpdating { return !GetApplication().MayUpdate(); }

	// Prevents loading of assemblies when it is inconvenient.
	CUSTOM static void LockReloadAssemblies () { GetApplication().LockReloadAssemblies(); } 
	
	// Invokes the menu item in the specified path.
	CUSTOM static bool ExecuteMenuItem(string menuItemPath) { return MenuController::ExecuteMainMenuItem(menuItemPath); }
	
	// Like ExecuteMenuItem, but applies action to specified GameObjects if the menu action supports it.
	CUSTOM internal static bool ExecuteMenuItemOnGameObjects(string menuItemPath, GameObject[] objects)
	{
		vector<GameObject*> gos;
		MonoObjectArrayToVector<GameObject>(objects, gos);
		return MenuController::ExecuteMainMenuItemOnGameObjects(menuItemPath, gos);
	}
	 
	//	Must be called after LockReloadAssemblies, to reenable loading of assemblies.
	CUSTOM static void UnlockReloadAssemblies () { GetApplication().UnlockReloadAssemblies(); } 

	// Path to the Unity editor contents folder (RO)
	THREAD_SAFE
	CUSTOM_PROP static string applicationContentsPath { return scripting_string_new(GetApplicationContentsPath()); }
	
	// Returns the path to the Unity editor application (RO)
	CUSTOM_PROP static string applicationPath { return scripting_string_new(GetApplicationPath()); }
	
	// Exit the Unity editor application. 
	CUSTOM static void Exit (int returnValue) { exit(returnValue); }

	CUSTOM internal static void SetSceneRepaintDirty () { GetApplication().SetSceneRepaintDirty(); }


	// Delegate to be called for every visible list item in the ProjectWindow on every OnGUI event.
	CSRAW public delegate void ProjectWindowItemCallback (string guid, Rect selectionRect);
	
	// Delegate for OnGUI events for every visible list item in the ProjectWindow.
	CSRAW public static ProjectWindowItemCallback projectWindowItemOnGUI;

	// Can be used to ensure repaint of the ProjectWindow.
	CSRAW public static void RepaintProjectWindow ()
	{
		foreach (ProjectBrowser pb in ProjectBrowser.GetAllProjectBrowsers ())
			pb.Repaint ();
	}

	// Can be used to ensure repaint of AnimationWindow
	CSRAW public static void RepaintAnimationWindow ()
	{
		foreach (AnimationWindow animationWindow in AnimationWindow.GetAllAnimationWindows ())
			animationWindow.Repaint ();
	}
	
	// Delegate to be called for every visible list item in the HierarchyWindow on every OnGUI event.
	CSRAW public delegate void HierarchyWindowItemCallback (int instanceID, Rect selectionRect);
	
	// Delegate for OnGUI events for every visible list item in the HierarchyWindow.
	CSRAW public static HierarchyWindowItemCallback hierarchyWindowItemOnGUI;

	// Can be used to ensure repaint of the HierarchyWindow.
	CSRAW public static void RepaintHierarchyWindow ()
	{
		foreach (HierarchyWindow pw in Resources.FindObjectsOfTypeAll(typeof(HierarchyWindow)))
			pw.Repaint();	
	}
	
	
	// Delegate to be called from [[EditorApplication]] callbacks.
	CSRAW public delegate void CallbackFunction ();

	// Delegate for generic updates.	
	CSRAW public static CallbackFunction update;

	CSRAW public static CallbackFunction delayCall;
	
	// Each time an object is (or a group of objects are) created, renamed, parented, unparented or destroyed this callback is raised.	
	CSRAW public static CallbackFunction hierarchyWindowChanged;
	
	CSRAW public static CallbackFunction projectWindowChanged;
	
	CSRAW public static CallbackFunction searchChanged;

	// Delegate for changed keyboard modifier keys.
	CSRAW public static CallbackFunction modifierKeysChanged;

	// Delegate for play mode state changes.
	CSRAW public static CallbackFunction playmodeStateChanged;

	// Global key up/down event that was not handled by anyone
	CSRAW internal static CallbackFunction globalEventHandler;

	// Windows were reordered
	CSRAW internal static CallbackFunction windowsReordered;


	CSRAW private static void Internal_CallUpdateFunctions ()
	{
		if (update != null)
			update ();
	}

	CSRAW private static void Internal_CallDelayFunctions ()
	{
		CallbackFunction delay = delayCall;
		delayCall = null;
		
		if (delay != null)
			delay ();
	}

	CSRAW private static void Internal_SwitchSkin ()
	{
		EditorGUIUtility.Internal_SwitchSkin();
	}
	
	CSRAW internal static void RequestRepaintAllViews ()
	{
		Internal_RepaintAllViews ();
	}
	
	CSRAW private static void Internal_RepaintAllViews ()
	{
		foreach (GUIView view in Resources.FindObjectsOfTypeAll(typeof(GUIView)))
			view.Repaint();
	}

	CSRAW private static void Internal_CallHierarchyWindowHasChanged ()
	{
		if (hierarchyWindowChanged != null)
			hierarchyWindowChanged ();
	}

	CSRAW private static void Internal_CallProjectWindowHasChanged ()
	{
		if (projectWindowChanged != null)
			projectWindowChanged ();
	}
	
	CSRAW internal static void Internal_CallSearchHasChanged ()
	{
		if (searchChanged != null)
			searchChanged ();
	}


	// Single use case for now ONLY!
	CSRAW internal static void CallDelayed (CallbackFunction function, float timeFromNow) {
		delayedCallback = function;
		s_DelayedCallbackTime = Time.realtimeSinceStartup + timeFromNow;
		update += CheckCallDelayed;
	}
	CSRAW static CallbackFunction delayedCallback;
	CSRAW static float s_DelayedCallbackTime = 0.0f;

	static void CheckCallDelayed () {
		if (Time.realtimeSinceStartup > s_DelayedCallbackTime) 
		{
			update -= CheckCallDelayed;
			delayedCallback ();
		}
	}

	CSRAW private static void Internal_PlaymodeStateChanged ()
	{
		if (playmodeStateChanged != null)
			playmodeStateChanged ();
	}

	CSRAW private static void Internal_CallKeyboardModifiersChanged ()
	{
		if (modifierKeysChanged != null)
			modifierKeysChanged ();
	}
	
	CSRAW private static void Internal_CallWindowsReordered ()
	{
		if (windowsReordered != null)
			windowsReordered ();
	}

	CSRAW private static void Internal_CallGlobalEventHandler ()
	{
		if (globalEventHandler != null)
			globalEventHandler ();
		
		// Ensure this is called last in order to make sure no null current events are passed to other handlers
		WindowLayout.MaximizeKeyHandler ();
			
		Event.current = null;
	}
	
	// Plays system beep sound.
	CUSTOM static void Beep () 
	{ 
		UnityBeep();
	}
	
	CUSTOM_PROP internal static Object tagManager  { return Scripting::ScriptingWrapperFor (&GetTagManager ()); }
	
	// The time since the editor was started (RO)
	CUSTOM_PROP public static double timeSinceStartup { return  GetTimeSinceStartup (); }
END
	
	
CSRAW }
