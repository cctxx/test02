CSRAW
using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Reflection;

namespace UnityEditor {

// Derive from this class to create an editor wizard.
NONSEALED_CLASS ScriptableWizard : EditorWindow
	CSRAW 
	private GenericInspector m_Inspector;
	private string m_HelpString = "";
	private string m_ErrorString = "";
	private bool m_IsValid = true;
	private Vector2 m_ScrollPosition;
	private string m_CreateButton = "Create";
	private string m_OtherButton = "";
	
	private void OnDestroy ()
	{
		DestroyImmediate(m_Inspector);	
	}
	
	private void InvokeWizardUpdate ()
	{
		const BindingFlags kInstanceInvokeFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.FlattenHierarchy;
		MethodInfo method = GetType().GetMethod("OnWizardUpdate", kInstanceInvokeFlags);
		if (method != null)
			method.Invoke(this, null);
	}
	
	CLASS private Styles 
		CSRAW
		public static string errorText = "Wizard Error";	
		public static string box = "Wizard Box";
	END
	
	//@TODO: Force repaint if scripts recompile
	private void OnGUI ()
	{
		EditorGUIUtility.labelWidth = 150;
		GUILayout.Label (m_HelpString, GUILayout.ExpandHeight (true));
		
		if (m_Inspector == null)
		{
			m_Inspector = ScriptableObject.CreateInstance<GenericInspector>();
			m_Inspector.hideFlags = HideFlags.HideAndDontSave;
			m_Inspector.InternalSetTargets(new Object[] {this});
		}

		// Render contents using Generic Inspector GUI
		m_ScrollPosition = EditorGUILayout.BeginVerticalScrollView (m_ScrollPosition, false, GUI.skin.verticalScrollbar, "OL Box");
		GUIUtility.GetControlID (645789, FocusType.Passive);
		bool modified = m_Inspector.DrawDefaultInspector();
		EditorGUILayout.EndScrollView ();
		
		
		// Create and Other Buttons
		GUILayout.BeginVertical ();
		if (m_ErrorString != string.Empty)
			GUILayout.Label (m_ErrorString, Styles.errorText, GUILayout.MinHeight (32));
		else
			GUILayout.Label (string.Empty, GUILayout.MinHeight (32));
		GUILayout.FlexibleSpace ();
		
		GUILayout.BeginHorizontal ();
		GUILayout.FlexibleSpace ();
		GUI.enabled = m_IsValid;
		
		const BindingFlags kInstanceInvokeFlags = BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.FlattenHierarchy;
		if (m_OtherButton != "" && GUILayout.Button (m_OtherButton, GUILayout.MinWidth (100)))
		{
			MethodInfo method = GetType().GetMethod("OnWizardOtherButton", kInstanceInvokeFlags);
			if (method != null)
			{
				method.Invoke(this, null);
				GUIUtility.ExitGUI();
			}
			else
				Debug.LogError("OnWizardOtherButton has not been implemented in script");
		}

		if (m_CreateButton != "" && GUILayout.Button (m_CreateButton, GUILayout.MinWidth (100)))
		{
			MethodInfo method = GetType().GetMethod("OnWizardCreate", kInstanceInvokeFlags);
			if (method != null)
				method.Invoke(this, null);
			else
				Debug.LogError("OnWizardCreate has not been implemented in script");
			Close();
			GUIUtility.ExitGUI();
		}
		GUI.enabled = true;
		
		GUILayout.EndHorizontal ();
		GUILayout.EndVertical ();
		if (modified)
			InvokeWizardUpdate ();
	}
	
	
	// Creates a wizard.
	CSRAW public static T DisplayWizard<T> (string title) where T : ScriptableWizard
	{
		return DisplayWizard<T> (title, "Create", "");
	}
	
	///*listonly*
	CSRAW public static T DisplayWizard<T> (string title, string createButtonName) where T : ScriptableWizard
	{
		return DisplayWizard<T> (title, createButtonName, "");
	}
	
	///*listonly*
	CSRAW public static T DisplayWizard<T> (string title, string createButtonName, string otherButtonName) where T : ScriptableWizard
	{
		return (T)DisplayWizard(title, typeof(T), createButtonName, otherButtonName);
	}
	

	// Creates a wizard.
	CSRAW public static ScriptableWizard DisplayWizard (string title, System.Type klass, string createButtonName = "Create", string otherButtonName = "")
	{
		ScriptableWizard wizard = ScriptableObject.CreateInstance(klass) as ScriptableWizard;
		wizard.m_CreateButton = createButtonName;
		wizard.m_OtherButton = otherButtonName;
		wizard.title = title;
		if (wizard != null)
		{
			wizard.InvokeWizardUpdate ();
			wizard.ShowUtility ();	
		}
		return wizard;
	}

	// This is called when the wizard is opened or whenever the user changes something in the wizard.
	CSNONE void OnWizardUpdate ();
	
	// This is called when the user clicks on the Create button.
	CSNONE void OnWizardCreate();

	// Called every frame when the wizard is visible.
	CSNONE void OnDrawGizmos ();


	// Allows you to provide an action when the user clicks on the other button.
	CSNONE void OnWizardOtherButton();
	
	// Allows you to set the help text of the wizard.
	CSRAW public string helpString { get { return m_HelpString; }
		set
		{
			if (m_HelpString != value)
				Repaint();

			if (m_HelpString != null)
				m_HelpString = value;
			else
				m_HelpString = "";	
		}
	}
	
	// Allows you to set the error text of the wizard.
	CSRAW public string errorString { get { return m_ErrorString; }
		set
		{
			if (m_ErrorString != value)
				Repaint();
			if (m_ErrorString != null)
				m_ErrorString = value;
			else
				m_ErrorString = "";	
		}
	}
	
	// Allows you to enable and disable the wizard create button, so that the user can not click it.
	CSRAW public bool isValid { get { return m_IsValid; }	
		set { m_IsValid = value; }	
	}

END

CSRAW

} //namespace
