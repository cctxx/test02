// Substance Interoperability file
// SUBSTANCE HOOK

C++RAW

#include "UnityPrefix.h"
#include "Runtime/Mono/MonoBehaviour.h"
#include "Runtime/Mono/MonoManager.h"
#include "Runtime/Scripting/ScriptingExportUtility.h"
#include "Editor/Src/AssetPipeline/SubstanceImporter.h"
#include "Runtime/Graphics/SubstanceArchive.h"

using namespace std;

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections;
using System.Collections.Generic;


namespace UnityEditor
{

// Material informations for Procedural Material textures generation
// I have hidden this odd implementation detail from the public interface.
STRUCT internal ProceduralMaterialInformation
	// Offset and scaling
	CSRAW Vector2			m_TextureOffsets;
	CSRAW Vector2			m_TextureScales;
	CSRAW int				m_GenerateAllOutputs;
	CSRAW int				m_AnimationUpdateRate;

	// Gets or sets the texture offsets
	CSRAW public Vector2 offset { get { return m_TextureOffsets; } set { m_TextureOffsets = value; } }

	// Gets or sets the texture scale factors
	CSRAW public Vector2 scale { get { return m_TextureScales; } set { m_TextureScales = value; } }

	// Gets or sets if all the outputs are generated independently of the current shader
	CSRAW public bool generateAllOutputs { get { return m_GenerateAllOutputs!=0; } set { m_GenerateAllOutputs = value?1:0; } }

	// Gets or sets the animation update rate in millisecond
	CSRAW public int animationUpdateRate { get { return m_AnimationUpdateRate; } set { m_AnimationUpdateRate = value; } }
END


// Actual classes used by inspectors

// Substance importer lets you access the imported Procedural Material instances.
CLASS SubstanceImporter : AssetImporter

	// EXPOSED

	// Get a list of the names of the Procedural Material prototypes in the package.
	CUSTOM string[] GetPrototypeNames ()
	{
		return Scripting::StringVectorToMono (self->GetSubstanceNames ());
	}

	// Get the number of Procedural Material instances.
	CUSTOM int GetMaterialCount ()
	{
		return self->GetInstanceCount ();
	}

	// Get an array with the Procedural Material instances.
	CUSTOM ProceduralMaterial[] GetMaterials ()
	{
		return CreateScriptingArrayFromUnityObjects (self->GetImportedMaterials (), ClassID (ProceduralMaterial));
	}

	// Clones an existing Procedural Material instance.
	CUSTOM string CloneMaterial (ProceduralMaterial material)
	{
		return MonoStringNew(self->CloneMaterialInstance (*material));
	}

	// Instantiate a new Procedural Material instance from a prototype.
	CUSTOM string InstantiateMaterial (string prototypeName)
	{
		return MonoStringNew(self->InstanciatePrototype (prototypeName));
	}

	// Destroy an existing Procedural Material instance.
	CUSTOM void DestroyMaterial (ProceduralMaterial material)
	{
		self->DeleteMaterialInstance (*material);
	}

	// Resets the Procedural Material to its default values.
	CUSTOM void ResetMaterial (ProceduralMaterial material)
	{
		self->ResetDefaultValues (*material);
	}

	// Rename an existing Procedural Material instance.
	CUSTOM bool RenameMaterial (ProceduralMaterial material, string name)
	{
		return self->RenameMaterialInstance (*material, name);
	}

	// After modifying the shader of a Procedural Material, call this function to apply the changes to the importer.
	CUSTOM public void OnShaderModified (ProceduralMaterial material)
	{
		self->OnShaderModified(*material);
	}

	// Get the material offset, which is used for all the textures that are part of this Procedural Material.
	CSRAW public Vector2 GetMaterialOffset (ProceduralMaterial material)
	{
		return GetMaterialInformation(material).offset;
	}

	// Set the material offset, which is used for all the textures that are part of this Procedural Material.
	CSRAW public void SetMaterialOffset (ProceduralMaterial material, Vector2 offset)
	{
		ProceduralMaterialInformation information = GetMaterialInformation (material);
		information.offset = offset;
		SetMaterialInformation (material, information);
	}

	// Get the material scale, which is used for all the textures that are part of this Procedural Material.
	CSRAW public Vector2 GetMaterialScale (ProceduralMaterial material)
	{
		return GetMaterialInformation(material).scale;
	}

	// Set the material scale, which is used for all the textures that are part of this Procedural Material.
	CSRAW public void SetMaterialScale (ProceduralMaterial material, Vector2 scale)
	{
		ProceduralMaterialInformation information = GetMaterialInformation (material);
		information.scale = scale;
		SetMaterialInformation (material, information);
	}

	// Checks if the Procedural Material need to force generation of all its outputs.
	CSRAW public bool GetGenerateAllOutputs (ProceduralMaterial material)
	{
		return GetMaterialInformation (material).generateAllOutputs;
	}

	// Specifies if the Procedural Material need to force generation of all its outputs.
	CSRAW public void SetGenerateAllOutputs (ProceduralMaterial material, bool generated)
	{
		ProceduralMaterialInformation information = GetMaterialInformation (material);
		information.generateAllOutputs = generated;
		SetMaterialInformation (material, information);
	}

	// Get the Procedural Material animation update rate in millisecond.
	CSRAW public int GetAnimationUpdateRate (ProceduralMaterial material)
	{
		return GetMaterialInformation (material).animationUpdateRate;
	}

	// Set the Procedural Material animation update rate in millisecond.
	CSRAW public void SetAnimationUpdateRate (ProceduralMaterial material, int animation_update_rate)
	{
		ProceduralMaterialInformation information = GetMaterialInformation (material);
		information.animationUpdateRate = animation_update_rate;
		SetMaterialInformation (material, information);
	}

	// Get the alpha source of the given texture in the Procedural Material.
	CUSTOM ProceduralOutputType GetTextureAlphaSource (ProceduralMaterial material, string textureName)
	{
		return self->GetTextureAlphaSource (*material, textureName);
	}

	// Set the alpha source of the given texture in the Procedural Material.
	CUSTOM void SetTextureAlphaSource (ProceduralMaterial material, string textureName, ProceduralOutputType alphaSource)
	{
		self->SetTextureAlphaSource (*material, textureName, alphaSource);
	}

	// Get size/format/behavior information for a material in the package
	CUSTOM bool GetPlatformTextureSettings (string materialName, string platform, out int maxTextureWidth, out int maxTextureHeight, out int textureFormat, out int loadBehavior)
	{
		return self->GetPlatformTextureSettings (materialName, platform, maxTextureWidth, maxTextureHeight, textureFormat, loadBehavior);
	}

	// Set size/format/behavior information for a material in the package
	CUSTOM void SetPlatformTextureSettings (string materialName, string platform, int maxTextureWidth, int maxTextureHeight, int textureFormat, int loadBehavior)
	{
		self->SetPlatformTextureSettings (materialName, platform, maxTextureWidth, maxTextureHeight, textureFormat, loadBehavior);
	}

	// INTERNAL

	// Gets informations pertaining to a material instance's textures generation
	CUSTOM private ProceduralMaterialInformation GetMaterialInformation (ProceduralMaterial material)
	{
		ProceduralMaterialInformation information = self->GetMaterialInformation (*material);
		return information;
	}

	// Sets new material information
	CUSTOM private void	SetMaterialInformation (ProceduralMaterial material, ProceduralMaterialInformation information)
	{
		self->SetMaterialInformation (*material, information);
	}

	CUSTOM internal static string ProceduralOutputTypeToUnityShaderPropertyName (ProceduralOutputType substanceType)
	{
		return MonoStringNew (ProceduralPropertyTypeToUnityShaderPropertyName (substanceType));
	}

	// Compares a texture and a property name and returns true if the texture is a ProceduralTexture locked to that property
	CSRAW internal static bool IsProceduralTextureSlot (Material material, Texture tex, string name)
	{
		return (material is ProceduralMaterial && tex is ProceduralTexture && SubstanceImporter.ProceduralOutputTypeToUnityShaderPropertyName ((tex as ProceduralTexture).GetProceduralOutputType ()) == name
			&& SubstanceImporter.IsSubstanceParented(tex as ProceduralTexture, material as ProceduralMaterial));
	}

	// Platform settings

	CUSTOM internal void ClearPlatformTextureSettings (string materialName, string platform)
	{
		self->ClearPlatformTextureSettings (materialName, platform);
	}

	CUSTOM internal void OnTextureInformationsChanged (ProceduralTexture texture)
	{
		self->OnTextureInformationsChanged (*texture);
	}

	CUSTOM internal void ExportBitmaps (ProceduralMaterial material)
	{
		self->ExportBitmaps (*material);
	}

	CUSTOM internal static bool IsSubstanceParented (ProceduralTexture texture, ProceduralMaterial material)
	{
		return SubstanceImporter::IsSubstanceParented (*texture, *material);
	}
END

// Class for Substance Archive handling.
CLASS SubstanceArchive : Object

END

CSRAW
} // namespace UnityEditor


