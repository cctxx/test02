C++RAW

#include "UnityPrefix.h"
#include "Runtime/Mono/MonoExportUtility.h"
#include "Editor/Src/Highlighter/HighlighterCore.h"

using namespace Unity;
using namespace std;

CSRAW

using UnityEngine;
using System;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

namespace UnityEditor
{

ENUM HighlightSearchMode
	None = 0,
	Auto = 1,
	Identifier = 2,
	PrefixLabel = 3,
	Content = 4,
END

CLASS Highlighter
	
	// Internal API
	
	CUSTOM_PROP internal static HighlightSearchMode searchMode 
		{ return HighlighterCore::s_SearchMode; } 
		{ HighlighterCore::s_SearchMode = value; }

	CUSTOM_PROP internal static bool searching 
		{ return HighlighterCore::s_SearchMode != kHighlightNone; }

	CUSTOM internal static void Handle (Rect position, string text)
	{
		UTF16String str (text.AsUTF8().c_str());
		GUIState &cState = GetGUIState();
		
		HighlighterCore::Handle(cState, position, str);
	}
	
	CUSTOM internal static string internal_get_activeText ()
		{ return HighlighterCore::s_ActiveText.GetScriptingString (); }

	CUSTOM internal static void internal_set_activeText (string value)
		{ HighlighterCore::s_ActiveText.CopyString(UTF16String(value.AsUTF8().c_str())); }
	
	CUSTOM internal static Rect internal_get_activeRect ()
		{ return HighlighterCore::s_ActiveRect; }

	CUSTOM internal static void internal_set_activeRect (Rect value)
		{ HighlighterCore::s_ActiveRect = value; }
	
	CUSTOM internal static bool internal_get_activeVisible ()
		{ return HighlighterCore::s_ActiveVisible; }

	CUSTOM internal static void internal_set_activeVisible (bool value)
		{ HighlighterCore::s_ActiveVisible = value; }
	
END

CSRAW }
