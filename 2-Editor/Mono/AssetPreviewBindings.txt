C++RAW

#include "UnityPrefix.h"
#include "Editor/Src/Utility/AssetPreviews.h"
#include "Runtime/Scripting/ScriptingUtility.h"
#include "Runtime/Mono/MonoBehaviour.h"
#include "Runtime/Mono/MonoScript.h"
#include "Editor/Src/Utility/ObjectImages.h"
#include "Runtime/Graphics/Texture2D.h"
#include "Runtime/Scripting/Backend/ScriptingTypeRegistry.h"
#include "Runtime/Scripting/Scripting.h"

using namespace std;

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Collections;

namespace UnityEditor
{

CLASS AssetPreview

	CSRAW const int kSharedClientID = 0;

	// ----------------------
	// PreviewTextureManager 
	// ----------------------

	C++RAW
	PreviewTextureManager& GetPreviewManager (int clientID)
	{
		return *GetPreviewTextureManagerCache ().GetPreviewTextureManagerByID (clientID);
	}


	// Returns a preview texture for an asset.
	CSRAW public static Texture2D GetAssetPreview (Object asset)
	{
		if (asset != null)
			return GetAssetPreview (asset.GetInstanceID());
		else
			return null;
	}

	// Returns a preview texture for an instanceID of an asset
	CSRAW internal static Texture2D GetAssetPreview (int instanceID)
	{
		return GetAssetPreview (instanceID, kSharedClientID);
	}

	CUSTOM internal static Texture2D GetAssetPreview (int instanceID, int clientID)
	{
		return Scripting::ScriptingWrapperFor(GetPreviewManager(clientID).GetPreview(instanceID));
	}


	CSRAW public static bool IsLoadingAssetPreview (int instanceID)
	{
		return IsLoadingAssetPreview (instanceID, kSharedClientID);
	}

	CUSTOM internal static bool IsLoadingAssetPreview (int instanceID, int clientID)
	{
		return GetPreviewManager (clientID).IsLoadingPreview (instanceID);
	}
	
	CSRAW public static bool IsLoadingAssetPreviews ()
	{
		return IsLoadingAssetPreviews (kSharedClientID);
	}

	CUSTOM internal static bool IsLoadingAssetPreviews (int clientID)
	{
		return GetPreviewManager (clientID).IsLoadingPreviews ();
	}


	CSRAW internal static bool HasAnyNewPreviewTexturesAvailable ()
	{
		return HasAnyNewPreviewTexturesAvailable (kSharedClientID);
	}

	CUSTOM internal static bool HasAnyNewPreviewTexturesAvailable (int clientID)
	{
		return GetPreviewManager (clientID).HasAnyNewPreviewTexturesAvailable ();
	}


	CSRAW internal static void SetPreviewTextureCacheSize (int size)
	{
		SetPreviewTextureCacheSize (size, kSharedClientID);
	}

	CUSTOM internal static void SetPreviewTextureCacheSize (int size, int clientID)
	{
		GetPreviewManager (clientID).SetTextureLimit (size);
	}


	CUSTOM internal static void ClearTemporaryAssetPreviews ()
	{
		GetPreviewTextureManagerCache ().ClearAllTemporaryPreviews();
	}
	
	CUSTOM internal static void DeletePreviewTextureManagerByID (int clientID)
	{
		GetPreviewTextureManagerCache ().DeletePreviewTextureManagerByID (clientID);
	}

	
	// --------------------------------
	// Mini Thumbnail section
	// --------------------------------	

	// Returns the thumbnail for an object (like the ones you see in the project view).
	CUSTOM static Texture2D GetMiniThumbnail (Object obj)
	{
		return Scripting::ScriptingWrapperFor (TextureForObject (obj));
	}

	// Returns the thumbnail for the type.
	CSRAW public static Texture2D GetMiniTypeThumbnail (Type type)
	{
		return INTERNAL_GetMiniTypeThumbnailFromType (type);
	}

	// Returns the thumbnail for the object's type.
	CSRAW internal static Texture2D GetMiniTypeThumbnail (Object obj)
	{
		return INTERNAL_GetMiniTypeThumbnailFromObject (obj);
	}

	CUSTOM internal static Texture2D GetMiniTypeThumbnailFromClassID (int classID)
	{
		return Scripting::ScriptingWrapperFor (TextureForClass (classID));
	}

	CUSTOM internal static Texture2D INTERNAL_GetMiniTypeThumbnailFromObject (Object monoObj)
	{
		Texture* tex = NULL;
		Object* obj = monoObj;
		if (obj)
			tex = TextureForClass (obj->GetClassID ());
			
			
		return Scripting::ScriptingWrapperFor (tex);
	}

	CUSTOM internal static Texture2D INTERNAL_GetMiniTypeThumbnailFromType (Type type)
	{
		Texture2D* tex = NULL;
		if (type)
		{
			int classID = Scripting::GetClassIDFromScriptingClass(GetScriptingTypeRegistry().GetType(type));
			tex = TextureForClass (classID);
		}
		return Scripting::ScriptingWrapperFor (tex);
	}
END

CSRAW }
