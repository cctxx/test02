C++RAW

#include "UnityPrefix.h"
#include "Runtime/Utilities/FileUtilities.h"
#include "Runtime/Utilities/File.h"
#include "Editor/Platform/Interface/EditorUtility.h"
#include "Runtime/Scripting/ScriptingUtility.h"

using namespace std;

CSRAW
using System;
using UnityEngine;
using Object=UnityEngine.Object;
using System.IO;



namespace UnityEditor
{

// Lets you do ''move'', ''copy'', ''delete'' operations over files or directories
CLASS FileUtil
	// Deletes a file or a directory given a path.
	CUSTOM static bool DeleteFileOrDirectory (string path)
	{
		return DeleteFileOrDirectory (path);
	}
	
    // Copies a file or a directory.
	CUSTOM static void CopyFileOrDirectory (string from, string to)
	{
		std::string toCpp = to,
		            fromCpp = from;
		if (IsPathCreated (toCpp) || !CopyFileOrDirectory (from, toCpp))
		{
			Scripting::RaiseManagedException ("System.IO", "IOException", "Failed to Copy File / Directory from '%s' to '%s'.", fromCpp.c_str (), toCpp.c_str ());
		}
	}

	// Copies the file or directory.
	CUSTOM static void CopyFileOrDirectoryFollowSymlinks (string from, string to)
	{
		std::string toCpp = to,
		            fromCpp = from;
		if (IsPathCreated (toCpp) || !CopyFileOrDirectoryFollowSymlinks (from, to))
		{
			Scripting::RaiseManagedException ("System.IO", "IOException", "Failed to Copy File / Directory from '%s' to '%s'.", fromCpp.c_str (), toCpp.c_str ());
		}
	}

	// Moves a file or a directory from a given path to another path.
	
	CUSTOM static void MoveFileOrDirectory (string from, string to)
	{
		std::string toCpp = to,
		            fromCpp = from;
		if (IsPathCreated (toCpp) || !MoveFileOrDirectory (fromCpp, toCpp))
		{
			Scripting::RaiseManagedException ("System.IO", "IOException", "Failed to Move File / Directory from '%s' to '%s'.", fromCpp.c_str (), toCpp.c_str ());
		}
	}
	
	// Returns a unique path in the Temp folder within your current project.
	CUSTOM static string GetUniqueTempPathInProject()
	{
		return scripting_string_new(GetUniqueTempPathInProject());
	}

	CUSTOM internal static string GetActualPathName (string path)
	{
		return scripting_string_new(GetActualPathSlow (path));
	}
	
	//*undocumented*
	CUSTOM static string GetProjectRelativePath(string path)
	{
		return scripting_string_new(GetProjectRelativePath (path));
	}
	
	CUSTOM internal static string GetLastPathNameComponent (string path)
	{
		return scripting_string_new(GetLastPathNameComponent (path));
	}
	
	CUSTOM internal static string DeleteLastPathNameComponent (string path)
	{
		return scripting_string_new(DeleteLastPathNameComponent (path));
	}
	
	CUSTOM internal static string GetPathExtension (string path)
	{
		return scripting_string_new(GetPathNameExtension (path));
	}
	
	// Replaces a file.
	CSRAW public static void ReplaceFile(string src, string dst)
	{
		if (File.Exists(dst))
			FileUtil.DeleteFileOrDirectory(dst);
			
		FileUtil.CopyFileOrDirectory(src, dst);
	}

	// Replaces a directory.
	CSRAW public static void ReplaceDirectory(string src, string dst)
	{
		if (Directory.Exists(dst))
			FileUtil.DeleteFileOrDirectory(dst);
			
		FileUtil.CopyFileOrDirectory(src, dst);
	}

END


CSRAW }
