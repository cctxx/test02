C++RAW

#include "UnityPrefix.h"
#include "Runtime/BaseClasses/GameObject.h"
#include "Runtime/Graphics/Transform.h"
#include "Runtime/Mono/MonoBehaviour.h"

#include "Runtime/Mono/MonoScript.h"
#include "Runtime/Scripting/ScriptingUtility.h"

#include "Runtime/NavMesh/NavMeshLayers.h"

#include "Runtime/Animation/Avatar.h"
#include "Runtime/Animation/OptimizeTransformHierarchy.h"
#include "Editor/Src/Utility/TransformUtility.h"

using namespace std;

CSRAW
using UnityEngine;
 
namespace UnityEditor
{

// GameObject utility functions.
CLASS GameObjectUtility
	
	// Gets the set StaticEditorFlags
	CUSTOM static public StaticEditorFlags GetStaticEditorFlags (GameObject go)
	{
		return go->GetStaticEditorFlags ();
	}
	
	// Returns true if the passed in StaticEditorFlags are set
	CUSTOM static public bool AreStaticEditorFlagsSet (GameObject go, StaticEditorFlags flags)
	{
		return go->AreStaticEditorFlagsSet (flags);
	}
	
	// Sets the StaticEditorFlags
	CUSTOM static public void SetStaticEditorFlags (GameObject go, StaticEditorFlags flags)
	{
		return go->SetStaticEditorFlags (flags);
	}

	// Get the navmesh layer for the GameObject
	CUSTOM static int GetNavMeshLayer (GameObject go)
	{
		return go->GetNavMeshLayer ();
	}
		
	// Get the navmesh layer from the layer name
	CUSTOM static int GetNavMeshLayerFromName (string name)
	{
		NavMeshLayers& layers = GetNavMeshLayers ();
		return layers.GetNavMeshLayerFromName (name.AsUTF8());
	}
	
	// Set the navmesh layer for the gameobject
	CUSTOM static void SetNavMeshLayer (GameObject go, int layer)
	{
		go->SetNavMeshLayer (layer);
	}
	
	// Get all the navmesh layer names
	CUSTOM static string[] GetNavMeshLayerNames ()
	{
		NavMeshLayers& layers = GetNavMeshLayers ();
		std::vector<string> layerNames = layers.NavMeshLayerNames ();
		return Scripting::StringVectorToMono (layerNames);
	}
	
	// Optimize the transform hierarchy for the input character.
	CUSTOM static void OptimizeTransformHierarchy(GameObject go)
	{
		OptimizeTransformHierarchy(*go);
	}
	
	// De-optimize the transform hierarchy for the input character.
	CUSTOM static void DeoptimizeTransformHierarchy(GameObject go)
	{
		DeoptimizeTransformHierarchy(*go);
	}

	// Set the transforms depth used for hierarchy sorting
	CONDITIONAL ENABLE_EDITOR_HIERARCHY_ORDERING
	CUSTOM static void SetTransformDepth (Transform trans, int depth)
	{
		trans->SetOrder(depth);
	}

	
	// Get the transforms depth used for hierarchy sorting
	CONDITIONAL ENABLE_EDITOR_HIERARCHY_ORDERING
	CUSTOM static int GetTransformDepth (Transform trans)
	{
		return trans->GetOrder();
	}

	// Move the transform to the front (bottom) of its siblings transforms
	CONDITIONAL ENABLE_EDITOR_HIERARCHY_ORDERING
	CUSTOM static void MoveTransformFront(Transform trans)
	{
		MoveTransformForward(trans);
	}

	// Move the transform to the back (top) of its siblings transforms
	CONDITIONAL ENABLE_EDITOR_HIERARCHY_ORDERING
	CUSTOM static void MoveTransformBack(Transform trans)
	{
		MoveTransformBackwards(trans);
	}
END

CSRAW }
